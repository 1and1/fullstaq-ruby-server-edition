#!/usr/bin/env ruby
# encoding: utf-8
#
# Usage: ./scripts/autodetect-shlib-dependencies
#
# This script autodetects shared library dependencies of all
# binaries and libraries in a directively (recursively), and
# outputs a list of package dependency names, like so:
#
#     libc6 (>= 2.25), zlib1g (>= 1:1.1.4)
#
# This script aids the building of Debian packages via FPM,
# so that we don't have to manually specify each dependency
# because that is error-prone.
#
# The official Debian packaging tools already have this feature
# via dh_shlibdeps, but FPM can't automatically make use of that,
# so we do it ourselves. Under the hood, dh_shlibdeps makes use
# of dpkg-shlibdeps, which is invoked like so:
#
#     dpkg-shlibdeps -O <LIST OF FILES>
#
# However, dpkg-shlibs requires that the current working directory
# contains these files:
#
#     debian/control
#     debian/<something>/DEBIAN/shlibs
#
# `control` can be any valid Debian package control file. The contents
# don't matter.
#
# `shlibs` must contain a list of entries corresponding to input libraries
# that contain a SONAME attribute. Each entry must specify, in a space-delimited
# format:
#
#  - The SONAME without the .so extension and version number.
#  - The version number itself.
#  - A package name (which can be anything).
#
# Example: suppose you have libruby.so.2.6.1 and libjemalloc.so.2. Then the
# `shlibs` file must contain:
#
#     libruby 2.6.1 foo
#     libjemalloc 2 foo

require 'fileutils'
require 'tempfile'

DUMMY_PACKAGE_NAME = 'foo'

def capture!(*command)
  data = IO.popen(command + [in: :in], 'r:utf-8') do |io|
    io.read
  end
  if $?.exitstatus != 0
    abort "ERROR: command failed: #{command.join(' ')}"
  else
    data
  end
end

def list_executable_and_library_files
  executables = capture!('find', '.', '-executable', '-type', 'f').split("\n").sort
  libs = capture!('find', '.', '-name', '*.so').split("\n").sort
  [executables, libs]
end

def create_dummy_debian_dir
  begin
    FileUtils.mkdir_p('debian/root/DEBIAN')
    File.open('debian/control', 'w:utf-8') do |f|
      f.write(
        "Source: $DUMMY_PACKAGE_NAME\n" \
        "Section: devel\n" \
        "Priority: optional\n" \
        "Maintainer: John Doe <john@doe.com>\n" \
        "\n" \
        "Package: #{DUMMY_PACKAGE_NAME}\n" \
        "Architecture: any\n" \
        "Description: #{DUMMY_PACKAGE_NAME}\n"
      )
    end
    yield
  ensure
    FileUtils.remove_entry_secure('debian')
  end
end

def create_debian_shlibs_file(libs)
  File.open('debian/root/DEBIAN/shlibs', 'w:utf-8') do |f|
    libs.each do |lib|
      soname_lines = capture!('objdump', '-p', lib).split("\n").grep(/SONAME/)
      next if soname_lines.empty?

      soname = soname_lines[0].strip.split(/ +/)[1]
      next if soname.empty?

      sobarename = soname.sub(/\.so\..*/, '')
      soversion = soname.sub(/.*\.so\./, '')

      if !soversion.empty?
        f.puts "#{sobarename} #{soversion} #{DUMMY_PACKAGE_NAME}"
      end
    end
  end
end

def run_dpkg_shlibdeps(executables, libs)
  # dpkg-shlibdeps outputs something like:
  # shlibs:Depends=foo, libc6 (>= 2.25), zlib1g (>= 1:1.1.4)
  #
  # There may be multiple lines like these.

  all_files = [executables, libs].sort.uniq
  command = ['dpkg-shlibdeps', '-O', all_files].flatten

  Tempfile.open('dpkg-shlibdeps-stderr', encoding: 'utf-8') do |tmpfile|
    result = []

    IO.popen(command + [in: :in, err: tmpfile], 'r:utf-8') do |io|
      io.each_line do |line|
        result.concat(line.strip.sub(/.*?=/, '').split(/ *, */))
      end
    end

    result.delete(DUMMY_PACKAGE_NAME)

    # Print dpkg-shlibdeps stderr except for some expected and
    # uninteresting messages.
    tmpfile.rewind
    stderr_lines = tmpfile.read.split("\n")
    stderr_lines.reject! do |line|
      line =~ /binaries to analyze should already be installed in their package's directory/
    end
    STDERR.puts stderr_lines
    puts result.join(', ')

    if $?.exitstatus != 0
      abort "ERROR: command failed: dpkg-shlibdeps -O <FILES...>"
    end
  end
end

def main
  Dir.chdir(ARGV[0]) if ARGV[0]
  executables, libs = list_executable_and_library_files
  create_dummy_debian_dir do
    create_debian_shlibs_file(libs)
    run_dpkg_shlibdeps(executables, libs)
  end
end

main
