#!/bin/bash
set -e

SELFDIR=$(dirname "$0")
SELFDIR=$(cd "$SELFDIR" && pwd)
# shellcheck source=lib/library.sh
source "$SELFDIR/lib/library.sh"

RUBY_RPM_PATH=
RBENV_RPM_PATH=
IMAGE=
EXPECTED_VARIANT=
DEBUG_ON_FAIL=false

function usage()
{
    echo "Usage: ./test-rpms <OPTIONS>"
    echo "Test built RPM packages."
    echo
    echo "Required options:"
    echo "  -r PATH     Path to Ruby RPM package"
    echo "  -b PATH     Path to Rbenv RPM package"
    echo "  -i IMAGE    Image name to run test in (e.g. centos:7)"
    echo "  -v VARIANT  Expected variant name (one of: normal, jemalloc, malloctrim)"
    echo
    echo "Optional options:"
    echo "  -D          Open a debug shell on failure"
    echo "  -h          Show usage"
}

function parse_options()
{
    local OPTIND=1
    local ORIG_ARGV
    local opt
    while getopts "r:b:i:v:Dh" opt; do
        case "$opt" in
        r)
            RUBY_RPM_PATH=$(absolute_path "$OPTARG")
            ;;
        b)
            RBENV_RPM_PATH=$(absolute_path "$OPTARG")
            ;;
        i)
            IMAGE="$OPTARG"
            ;;
        v)
            EXPECTED_VARIANT="$OPTARG"
            ;;
        D)
            DEBUG_ON_FAIL=true
            ;;
        h)
            usage
            exit
            ;;
        *)
            return 1
            ;;
        esac
    done

    (( OPTIND -= 1 )) || true
    shift $OPTIND || true
    ORIG_ARGV=("$@")

    if [[ "$RUBY_RPM_PATH" = "" ]]; then
        echo 'ERROR: please specify a Ruby RPM package path with -r.' >&2
        exit 1
    fi
    if [[ ! -e "$RUBY_RPM_PATH" ]]; then
        echo "ERROR: $RUBY_RPM_PATH does not exist." >&2
        exit 1
    fi
    if [[ "$RBENV_RPM_PATH" = "" ]]; then
        echo 'ERROR: please specify an Rbenv RPM package path with -b.' >&2
        exit 1
    fi
    if [[ ! -e "$RBENV_RPM_PATH" ]]; then
        echo "ERROR: $RBENV_RPM_PATH does not exist." >&2
        exit 1
    fi
    if [[ "$IMAGE" = "" ]]; then
        echo 'ERROR: please specify an image name with -i.' >&2
        exit 1
    fi
    if [[ "$EXPECTED_VARIANT" != normal && "$EXPECTED_VARIANT" != jemalloc && "$EXPECTED_VARIANT" != malloctrim ]]; then
        echo 'ERROR: please specify a valid variant name with -v.' >&2
        exit 1
    fi
}

parse_options "$@"

if tty -s; then
    TTY_ARGS=(-t -i)
else
    TTY_ARGS=()
fi

UTILITY_IMAGE_VERSION=$(read_single_value_file "$SELFDIR/environments/utility/image_tag")

TEMP_DIR=$(mktemp -d /tmp/test.XXXXXX)
function _cleanup()
{
    rm -rf "$TEMP_DIR"
}
mkdir -p "$TEMP_DIR/repo"

echo '--- Entering preparation Docker container ---'
verbose_run docker run --rm --init "${TTY_ARGS[@]}" \
    -v "$SELFDIR:/system:ro" \
    -v "$RUBY_RPM_PATH:/input/$(basename "$RUBY_RPM_PATH"):ro" \
    -v "$RBENV_RPM_PATH:/input/$(basename "$RBENV_RPM_PATH"):ro" \
    -v "$TEMP_DIR/repo:/output" \
    --user "$(id -u):$(id -g)" \
    "fullstaq/ruby-build-env-utility:$UTILITY_IMAGE_VERSION" \
    /system/container-entrypoints/test-rpms-prepare
echo


echo '--- Entering main Docker container ---'
verbose_run docker run --rm --init "${TTY_ARGS[@]}" \
    -v "$SELFDIR:/system:ro" \
    -v "$TEMP_DIR/repo:/input/repo:ro" \
    -e "RUBY_PACKAGE_NAME=$(basename "$RUBY_RPM_PATH")" \
    -e "EXPECTED_VARIANT=$EXPECTED_VARIANT" \
    -e "DEBUG_ON_FAIL=$DEBUG_ON_FAIL" \
    --user root \
    --entrypoint /system/container-entrypoints/test-rpms \
    "$IMAGE"
